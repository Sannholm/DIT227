#version 430

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

{% include "particles/common/update_common.glsl" %}

void main() {
    // Ignore extra invocations when number of alive particles is not
    // a multiple of work group size
    if (gl_GlobalInvocationID.x >= prevAliveCount)
        return;

    vec3 p0 = prevPositions[gl_GlobalInvocationID.x].xyz;
    vec3 v0 = prevVelocities[gl_GlobalInvocationID.x].xyz;
    float radius = prevRadiuses[gl_GlobalInvocationID.x];
    
    // Apply impluses // TODO: Before or after?
    vec3 v1 = v0 + vec3(0.0, -9.82, 0.0) * deltaTime; // TODO: Euler integration?
    vec3 p1 = p0 + v1 * deltaTime; // TODO: Euler integration?

    CollisionQuery query = checkCollision(p1, radius);
    if (query.colliding) {
        // Collision response
        p1 = p0; // TODO: More accurately find intersection point
        const float RESTITUTION = 0.9;
        v1 = reflect(v1, query.collision.normal) * RESTITUTION;
    }
    
    emitParticle(p1, v1, radius);
}