#version 430

{% include "particles/common/update_common.glsl" %}

vec2 rotate(vec2 v, float a) {
	float s = sin(a);
	float c = cos(a);
	mat2 m = mat2(c, s, -s, c);
	return m * v;
}

void updateParticle(float t0, vec3 p0, vec3 v0, float radius) {
    
    float angle = (sin(2 * time / 10) * (sin(time / 10) + cos(time / 10))) / 2;

    vec2 windDir = normalize(rotate(vec2(1,1), angle));
    float windStrength = 2;
    vec2 wind = windDir * windStrength;
    vec3 impulse = vec3(wind.x, -2, wind.y);
    
    // Apply impulses // TODO: Before or after?
    vec3 v1 = v0 + impulse * deltaTime; // TODO: Euler integration?
    vec3 p1 = p0 + v1 * deltaTime; // TODO: Euler integration?

    bool belowGround = p1.y <= 0.0;
    if (belowGround)
        return;

    CollisionQuery query = checkCollision(p1, radius);
    const float WINDOW_PANE_POS = -31.4892;
    bool insideHouse = WINDOW_PANE_POS - radius < p1.z;
    if (query.colliding || insideHouse) {
        p1 = p0;
        v1 = vec3(0);
    }

    const float MAX_LIFETIME = 10; // Seconds
    if (t0 + deltaTime >= MAX_LIFETIME) {
        return;
    }

    emitParticle(t0 + deltaTime, p1, v1, radius);
}