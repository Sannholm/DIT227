#version 430

{% include "common/math.glsl" %}
{% include "particles/common/update_common.glsl" %}

vec2 rotate(vec2 v, float a) {
	float s = sin(a);
	float c = cos(a);
	mat2 m = mat2(c, s, -s, c);
	return m * v;
}

CollisionQuery collide(vec3 pos, float radius) {
    CollisionQuery query = checkCollision(pos, radius);

    const float WINDOW_PANE_POS = -31.4892;
    bool insideHouse = WINDOW_PANE_POS - radius < pos.z;

    query.colliding = query.colliding || insideHouse;
    query.collision.normal = insideHouse ? vec3(0,0,-1) : query.collision.normal;

    return query;
}

void updateParticle(float t0, vec3 p0, vec3 v0, float radius) {
    initRng();

    const float density = 25; // kg/m^3 https://www.sciencelearn.org.nz/resources/1391-snow-and-ice-density
    float volume = 4/3*PI * radius * radius * radius; // Assuming a sphere
    float mass = density * volume;

    vec3 force = vec3(0);

    /* if (frameNum % 600 == 0) {
        force += vec3(10, 0, 0);
    } */

    // Gravity
    vec3 mg = mass * vec3(0, -9.82, 0);
    force += mg;

    // Wind
    float angle = (sin(2 * time / 10) * (sin(time / 10) + cos(time / 10))) / 2;
    vec2 windDir = normalize(rotate(vec2(1,1), angle));
    float windStrength = 0.05;
    vec2 wind = windDir * windStrength;
    force += vec3(wind.x, 0, wind.y);

    // Turbulence
    float turbulenceStrength = 0.06;
    force += normalize(randBetween(vec3(-1), vec3(1))) * turbulenceStrength;
    
    // Air drag. Based on:
    // - https://en.wikipedia.org/wiki/Drag_equation
    // - https://en.wikipedia.org/wiki/Drag_coefficient
    // - https://en.wikipedia.org/wiki/Density
    const float airDensity = 1.2; // kg/m^3
    const float dragCoefficient = 1.3; // https://www.jstage.jst.go.jp/article/jmsj1965/43/3/43_3_139/_pdf
    const float projectedArea = PI * radius * radius; // Assuming a sphere
    float flowSpeedSq = dot(v0, v0);
    float dragMagnitude = 0.5 * airDensity * flowSpeedSq * dragCoefficient * projectedArea;
    float speed = length(v0);
    vec3 drag = speed == 0 ? vec3(0) : -v0 / speed * dragMagnitude;
    force += drag;

    // Apply velocity and forces
    vec3 p1 = p0 + v0 * deltaTime; // TODO: Euler integration?
    vec3 acceleration = force / mass;
    vec3 v1 = v0 + acceleration * deltaTime; // TODO: Euler integration?

    bool belowGround = p1.y <= 0.0;
    if (belowGround)
        return;
    
    CollisionQuery query1 = collide(p1, radius);
    if (query1.colliding) {
        p1 = p0;
        //v1 = vec3(0);
        /* const float RESTITUTION = 0.1;
        v1 = reflect(v1, query.collision.normal) * RESTITUTION; */
    }

    const float MAX_LIFETIME = 20; // Seconds
    if (t0 >= MAX_LIFETIME) {
        return;
    }

    emitParticle(t0 + deltaTime, p1, v1, radius);
}